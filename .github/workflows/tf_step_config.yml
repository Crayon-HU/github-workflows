# tf_step_config.yml
name: tf_step_config

on:
  workflow_call:
    inputs:
      #Runner
      runner:
        required: false
        type: string
        default: 'ubuntu-latest'
        description: 'Either the type of runner or the label of the self hosted runner to be used. Defaults to ubuntu-latest.'

      #Terraform Infra Repository
      infra_repo:
        required: true
        type: string
        description: 'Name of the Terraform Infra Repository where HCL code resides.'

      infra_repo_ref:
        required: false
        type: string
        default: main
        description: 'The branch, tag or commit SHA to checkout. Defaults to main.'

      #Terraform Config Repository
      config_repo:
        required: true
        type: string
        description: 'Name of the Terraform Config Repository where JSON configurations resides.'

      config_repo_ref:
        required: false
        type: string
        default: main
        description: 'The branch, tag or commit SHA to checkout. Defaults to main.'

      #Terraform Configuration
      config_directory:
        required: true
        type: string
        description: 'The path to the configuration relative to infra-repo/config, infra-repo/config_override, infra-repo/terraform and config-repo/config directories. The same path should exist at all locations for configurations properly parsed.'

      #GitHub Owner
      github_owner:
        required: true
        type: string
        description: 'Either the GitHub username or organization name.'

    secrets:
      #GitHub PAT
      github_pat:
        required: true

jobs:
  tf_step_config:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Set GitHub environment variables
        run: |
          echo "GITHUB_TOKEN=${{ secrets.github_pat }}" >> $GITHUB_ENV
          echo "GITHUB_OWNER=${{ inputs.github_owner }}" >> $GITHUB_ENV

      - name: Checkout infra repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.github_owner }}/${{ inputs.infra_repo }}
          ref: ${{ inputs.infra_repo_ref}}
          token: ${{ secrets.github_pat }}
          path: infra

      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.github_owner }}/${{ inputs.config_repo }}
          ref: ${{ inputs.config_repo_ref}}
          token: ${{ secrets.github_pat }}
          path: config

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Set up a Python virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install jsonmerge

      - name: Merge and Validate JSON configurations
        run: |
          import json
          import os
          from glob import glob
          from jsonmerge import merge

          # Get workflow inputs
          config_directory = '${{ inputs.config_directory }}'
          print(f"Config directory: {config_directory}")
          workspace = os.getenv('GITHUB_WORKSPACE')

          # Helper function to load and validate JSON configuration
          def load_json(pattern):
              configs = {}
              for file_path in glob(pattern, recursive=True):
                  print(f"Found JSON file: {file_path}") 
                  try:
                      with open(file_path, 'r') as f:
                          config = json.load(f)
                          print(f"Loaded JSON configuration from {file_path}: {config}")
                          configs.update(json.load(f))
                  except json.JSONDecodeError as e:
                      print(f"JSON syntax error in {file_path}: {e}")
                      exit(1)
              return configs

          # Paths to JSON file patterns
          override_pattern = os.path.join(workspace, 'infra', 'config_override', config_directory, '*.json')
          config_pattern = os.path.join(workspace, 'config', 'config', config_directory, '*.json')
          local_pattern = os.path.join(workspace, 'infra', 'config', config_directory, '*.json')

          print(f"Override pattern: {override_pattern}")
          print(f"Config pattern: {config_pattern}")
          print(f"Local pattern: {local_pattern}")

          # Load and validate configurations
          local_config = load_json(local_pattern) if os.path.exists(local_pattern) else {}
          config = load_json(config_pattern) if os.path.exists(config_pattern) else {}
          override_config = load_json(override_pattern) if os.path.exists(override_pattern) else {}

          # Merge configurations
          merged_config = merge(merge(local_config, config), override_config)
          print(f"Merged configuration: {merged_config}")

          # Write terraform.tfvars.json
          tfvars_path = os.path.join(os.environ['GITHUB_WORKSPACE'], 'terraform.tfvars.json')
          with open(tfvars_path, 'w') as f:
              json.dump(merged_config, f, indent=2)

          print(f"Terraform variables have been written to {tfvars_path}")
        shell: python

      - name: Upload terraform.tfvars.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-tfvars
          path: ${{ github.workspace }}/terraform.tfvars.json